/*  rustsec-cve-importer
    Copyright (C) 2021 Alexander Kj√§ll

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

use crate::error::Result;
use postgres::{Client, NoTls};

mod error;

pub fn db_connection() -> Result<Client> {
    let mut settings = config::Config::default();
    settings.merge(config::File::with_name("settings"))?;

    Ok(Client::connect(
        &format!(
            "host={} user={} dbname={} password={}",
            settings.get_str("db-host")?,
            settings.get_str("db-user")?,
            settings.get_str("db-name")?,
            settings.get_str("db-password")?
        ),
        NoTls,
    )?)
}

fn main() {
    let advisory_db_repo = rustsec::Repository::fetch(
        rustsec::repository::git::DEFAULT_URL,
        rustsec::Repository::default_path(),
        false,
    )
    .unwrap_or_else(|e| {
        eprintln!("couldn't fetch advisory database: {}", e);
        std::process::exit(1);
    });

    let database = rustsec::Database::load_from_repo(&advisory_db_repo).unwrap_or_else(|e| {
        eprintln!("error loading advisory database: {}", e);
        std::process::exit(1);
    });

    let mut client = db_connection().unwrap();

    let rows = client
        .query(
            "select c.cve_id, r.ref
    from refs r
    left join cve_x_ref cxr on r.id=cxr.ref_id
    left join cves c on cxr.cve_id=c.id
    where ref like '%rustsec.org%'",
            &[],
        )
        .unwrap();
    let rows: Vec<(String, String)> = rows
        .iter()
        .map(|row| (row.get("cve_id"), row.get("ref")))
        .collect();

    for vuln in database.iter() {
        for (cve_id, reference) in &rows {
            if reference.contains(&vuln.id().to_string())
                && !vuln
                    .metadata
                    .aliases
                    .iter()
                    .any(|id| id.as_str() == cve_id.as_str())
            {
                println!(
                    "{}: {} matches {}",
                    &cve_id,
                    &reference,
                    &vuln.id().to_string()
                );
            }
        }
    }
}
